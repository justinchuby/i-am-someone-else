"""
MEASURE THE FREQUENCIES COMING IN THROUGH THE MICROPHONE

"""

IMPORT PYAUDIO
IMPORT NUMPY AS NP
IMPORT SCIPY.SIGNAL

CHUNK = 1024*2

WIDTH = 2
DTYPE = NP.INT16
MAX_INT = 32768.0

CHANNELS = 1
RATE = 11025*1
RECORD_SECONDS = 20

J = NP.COMPLEX(0,1)


P = PYAUDIO.PYAUDIO()
STREAM = P.OPEN(FORMAT=P.GET_FORMAT_FROM_WIDTH(WIDTH),
                CHANNELS=CHANNELS,
                RATE=RATE,
                INPUT=TRUE,
                OUTPUT=TRUE,
                FRAMES_PER_BUFFER=CHUNK)

PRINT("* RECORDING")

# INITIALIZE FILTER VARIABLES
FIR = NP.ZEROS(CHUNK * 2)
FIR[:(2*CHUNK)] = 1.
FIR /= FIR.SUM()

FIR_LAST = FIR
AVG_FREQ_BUFFER = NP.ZEROS(CHUNK)
OBJ = -NP.INF
T = 10

# INITIALIZE SAMPLE BUFFER
BUFFER = NP.ZEROS(CHUNK * 2)

#FOR I IN NP.ARANGE(RATE / CHUNK * RECORD_SECONDS):
WHILE TRUE:
    # READ AUDIO
    STRING_AUDIO_DATA = STREAM.READ(CHUNK)
    AUDIO_DATA = NP.FROMSTRING(STRING_AUDIO_DATA, DTYPE=DTYPE)
    NORMALIZED_DATA = AUDIO_DATA / MAX_INT
    FREQ_DATA = NP.FFT.FFT(NORMALIZED_DATA)

    # SYNTHESIZE AUDIO
    BUFFER[CHUNK:] = NP.RANDOM.RANDN(CHUNK)
    FREQ_BUFFER = NP.FFT.FFT(BUFFER)
    FREQ_FIR = NP.FFT.FFT(FIR)
    FREQ_SYNTH = FREQ_FIR * FREQ_BUFFER
    SYNTH = NP.REAL(NP.FFT.IFFT(FREQ_SYNTH))

    # ADJUST FIR
    # OBJECTIVE IS TO MAKE ABS(FREQ_SYNTH) AS MUCH LIKE LONG-TERM AVERAGE OF FREQ_BUFFER
    MEMORY=100
    AVG_FREQ_BUFFER = (AVG_FREQ_BUFFER*MEMORY + \
                           NP.ABS(FREQ_DATA)) / (MEMORY+1)
    OBJ_LAST = OBJ

    OBJ = NP.REAL(NP.DOT(AVG_FREQ_BUFFER[1:51], NP.ABS(FREQ_SYNTH[1:100:2])) / NP.DOT(FREQ_SYNTH[1:100:2], NP.CONJ(FREQ_SYNTH[1:100:2])))
    IF OBJ > OBJ_LAST:
        FIR_LAST = FIR
    FIR = FIR_LAST.COPY()

    # ADJUST FILTER IN FREQUENCY SPACE
    FREQ_FIR = NP.FFT.FFT(FIR)
    #T += NP.CLIP(NP.RANDOM.RANDINT(3)-1, 0, 64)
    T = NP.RANDOM.RANDINT(100)
    
    FREQ_FIR[T] += NP.RANDOM.RANDN()*.05

    # TRANSFORM FREQUENCY SPACE FILTER TO TIME SPACE, CLICK-FREE
    FIR = NP.REAL(NP.FFT.IFFT(FREQ_FIR))
    FIR[:CHUNK] *= NP.LINSPACE(1., 0., CHUNK)**.1
    FIR[CHUNK:] = 0


    # MOVE CHUNK TO START OF BUFFER
    BUFFER[:CHUNK] = BUFFER[CHUNK:]
    
    # WRITE AUDIO
    AUDIO_DATA = NP.ARRAY(NP.ROUND_(SYNTH[CHUNK:] * MAX_INT), DTYPE=DTYPE)
    STRING_AUDIO_DATA = AUDIO_DATA.TOSTRING()
    STREAM.WRITE(STRING_AUDIO_DATA, CHUNK)

PRINT("* DONE")

STREAM.STOP_STREAM()
STREAM.CLOSE()

P.TERMINATE()